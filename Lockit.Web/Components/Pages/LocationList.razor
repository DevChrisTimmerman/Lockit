@page "/lists/locations"

<MudTable Style="position: relative" Items="@locations" Filter="new Func<Location, bool>(SearchFunc)"  Height="calc(80vh - (var(--mud-appbar-height) + 60px))" Loading="!_dataLoaded" Virtualize Hover FixedHeader>
	<ToolBarContent>
		<MudText Typo="Typo.h6">All Locations</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<Location, object>(x => x.ID)">ID</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Location, object>(x =>x.Name)">Location</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Location, object>(x =>x.Prefix)">Prefix</MudTableSortLabel></MudTh>
		<MudTh Style="text-align: center">Locker count</MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Location, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
		<MudTh Style="text-align: center"><MudIcon Icon="@Icons.Material.Filled.DashboardCustomize" /></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.ID</MudTd>
		<MudTd>@context.Name</MudTd>
		<MudTd>@context.Prefix</MudTd>
		<MudTd Style="text-align: center">...</MudTd>
		<MudTd>@context.Description</MudTd>
		<MudTd Style="text-align: center">
			<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditLocation(context)" />
			<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteLocation(context)" />
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new[] { 10, 25, 100, int.MaxValue }"
		               RowsPerPageString="Rows per page"
		               AllItemsText="All"
		               InfoFormat="{first_item}-{last_item} // {all_items}"/>
	</PagerContent>
	<LoadingContent>
		<MudOverlay Visible="true" DarkBackground="true" Absolute="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	</LoadingContent>
</MudTable>

@* =================== Message boxes =================== *@

<MudMessageBox @ref="_deleteMsgBox" Title="Warning" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to <b>Delete</b> this location? This cannot be undone.
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
	</YesButton>
</MudMessageBox>

@code {
	[Inject]
	public LocationService LocationService { get; set; }
	private List<Location> locations = new List<Location>();
	private string _searchString = string.Empty;
	private bool _dataLoaded = false;

	private MudMessageBox _deleteMsgBox = new();

	protected override async Task OnInitializedAsync()
	{
		locations = await LocationService.GetAllLocationsAsync();
		_dataLoaded = true;
	}

	private bool SearchFunc(Location location)
	{
		if (string.IsNullOrWhiteSpace(_searchString)) return true;

		return location.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
	}

	private void EditLocation(Location location)
	{

	}

	private async Task DeleteLocation(Location location)
	{
		bool? result = await _deleteMsgBox.ShowAsync();
		if (result == true)
		{
			await LocationService.DeleteLocationAsync(location.ID);
			locations.Remove(location);
			StateHasChanged();
		}
	}

}
