@page "/setup"

<MudStepper @bind-ActiveIndex="_activeIndex" ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
	<MudStep Title="Setup locker locations" HasError="@(!ValidateLocations())"><MudChip T="string" Color=Color.Primary>Setup locker locations</MudChip></MudStep>
	<MudStep Title="Setup lockers"><MudChip T="string" Color=Color.Primary>Setup lockers</MudChip></MudStep>
	<MudStep Title="Overview"><MudChip T="string" Color=Color.Primary>Overview</MudChip></MudStep>


@switch (_activeIndex)
{
	case 0:
		@foreach (var loc in _locations)
		{
			<MudPaper Elevation="3">
				<MudGrid Justify="Justify.FlexStart" Spacing="4" Class="ma-5 pa-3">
					<MudItem xs="1">
						<MudTooltip ShowOnFocus Arrow Placement="Placement.Top" Text="Leave empty if no Prefix is wanted" Color="Color.Primary">
							<MudTextField T="string" Label="Prefix" @bind-Value="@loc.Prefix"/>
						</MudTooltip>
					</MudItem>
					<MudItem xs="3">
						<MudTextField T="string" Required Label="Name" @bind-Value="@loc.Name"/>
					</MudItem>
					<MudItem xs="7">
						<MudTextField T="string" Label="Description" @bind-Value="@loc.Description"/>
					</MudItem>
				</MudGrid>
			</MudPaper>
		}
		@*<MudButton ButtonType="ButtonType.Submit">Register</MudButton> *@
		<MudGrid Justify="Justify.FlexEnd">
			<MudItem>
				<MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="AddLocation" Color="Color.Success" />
				<MudIconButton Disabled="_locations.Count<2" Icon="@Icons.Material.Filled.Cancel" OnClick="RemoveLocation" Color="Color.Secondary" />
			</MudItem>
		</MudGrid>
		break;
	case 1:
		@for (int i = 0; i < _locations.Count; i++)
		{
			var loc = _locations[i];
			int index = i;
			<MudPaper Elevation="3">
				<MudGrid Justify="Justify.FlexStart" Spacing="4" Class="ma-5 pa-3">
					<MudItem xs="3">
						<MudText>@loc.Name </MudText>
					</MudItem>
					<MudItem xs="3">
						<MudText>@loc.Prefix </MudText>
					</MudItem>
					<MudItem xs="2">
						<MudTextField Required T="int?" Label="Locker count" @bind-Value="_locationsTotalCounts[index]"/>
					</MudItem>
					<MudItem xs="2">
						<MudTextField Required T="int?" Label="Locker colum count" @bind-Value="_locationsTotalPerColumnCounts[index]"/>
					</MudItem>
				</MudGrid>
			</MudPaper>
		}
		break;
	case 2:
		<MudGrid Class="pa-10" Justify="Justify.SpaceEvenly">
			@for (var i = 0; i < _locations.Count; i++)
			{
				var loc = _locations[i];
				int index = i;
				<MudPaper Elevation="3" Class="pa-4 ma-2">
					<MudItem>
						<MudGrid>
							<MudItem Style="width: auto; min-width: 100px">
								<MudText>@loc.Name </MudText>
								<MudText>Prefix: @loc.Prefix </MudText>
							</MudItem>
							<MudItem>
							<MudDivider Vertical/>
							</MudItem>
							<MudItem>
								<MudText>Total: @_locationsTotalCounts[index] </MudText>
								<MudText>Per Column: @_locationsTotalPerColumnCounts[index] </MudText>
							</MudItem>
						</MudGrid>

					</MudItem>
				</MudPaper>
			}
			</MudGrid>
		break;
	case 3:
		
		break;
	}
</MudStepper>

@code {
	[Inject] 
	IDialogService DialogService { get; set; }
	private int _activeIndex;
	private List<Location> _locations = new List<Location>();
	private List<int?> _locationsTotalCounts = new List<int?>();
	private List<int?> _locationsTotalPerColumnCounts = new List<int?>();

	protected override async Task OnInitializedAsync()
	{
		// Initialize with one default location
		AddLocation();
	}

	private void AddLocation()
	{
		_locations.Add(new Location());
		_locationsTotalCounts.Add(null);
		_locationsTotalPerColumnCounts.Add(null);
	}

	private void RemoveLocation()
	{
		_locations.RemoveAt(_locations.Count - 1);
		_locationsTotalCounts.Remove(_locationsTotalCounts.Count - 1);
		_locationsTotalPerColumnCounts.Remove(_locationsTotalPerColumnCounts.Count - 1);
	}

	private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
	{
		switch (arg.Action)
		{
			case StepAction.Complete:
				// occurs when clicking next
				await ControlStepCompletion(arg);
				break;
			case StepAction.Activate:
				// occurs when clicking a step header with the mouse
				//await ControlStepNavigation(arg);
				break;
			case StepAction.Reset:
				// occurs when clicking the reset button
				break;
			case StepAction.Skip:
				// occurs when clicking the skip button
				break;
		}
	}

	private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
	{
		switch (arg.StepIndex) {
			case 0:
				if (ValidateLocations() == false)
				{
					await DialogService.ShowMessageBox("Error", "Name field is required");
					arg.Cancel = true;
				}
				break;
			case 1:
				if (ValidateLockers() == false)
				{
					await DialogService.ShowMessageBox("Error", "Please enter valid locker counts for all locations, \r\n The total locker counter per location should be divisible by column count");
					arg.Cancel = true;
				}
				break;
			case 2:
				FinilizeSetup();
				break;
		}
	}

	private bool ValidateLocations()
	{
		foreach (var loc in _locations)
		{
			if (string.IsNullOrWhiteSpace(loc.Name))
			{
				return false;
			}
		}

		return true;
	}

	private bool ValidateLockers()
	{
		//Check for nulls
		foreach (var count in _locationsTotalCounts)
		{
			if (count == null)
			{
				return false;
			}
		}

		//Check for nulls
		foreach (var count in _locationsTotalPerColumnCounts)
		{
			if (count == null)
			{
				return false;
			}
		}

		//Check if total count is divisible by column count
		for (var i = 0; i < _locationsTotalCounts.Count; i++)
		{
			var count = _locationsTotalCounts[i];
			if (count % _locationsTotalPerColumnCounts[i] != 0)
			{
				return false;
			}
		}

		return true;
	}

	private void FinilizeSetup()
	{

	}

}
