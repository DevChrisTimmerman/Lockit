@page "/lists/lockers"
@using Lockit.Models
@using Lockit.Web.Services

<PageTitle>Locker List</PageTitle>

<MudTable Style="position: relative" Items="@_lockers" Filter="new Func<Locker, bool>(SearchFunc)" Height="calc(80vh - (var(--mud-appbar-height) + 60px))" Loading="!_dataLoaded" Virtualize Hover FixedHeader>
	<ToolBarContent>
		<MudText Typo="Typo.h6">All Lockers</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Number)">Locker #</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student != null ? x.Student.Name : _vacantLockerSort)">Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student != null ? x.Student.LastName : _vacantLockerSort)">Lastname</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student != null ? x.Student.Class : _vacantLockerSort)">Class</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Location.Name)">Location</MudTableSortLabel></MudTh>
		<MudTh Style="text-align: center"><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
		<MudTh Style="text-align: center"><MudIcon Icon="@Icons.Material.Filled.DashboardCustomize" /></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.Number</MudTd>
		<MudTd>@context.Student?.Name</MudTd>
		<MudTd>@context.Student?.LastName</MudTd>
		<MudTd>@context.Student?.Class</MudTd>
		<MudTd>@context.Location.Name</MudTd>
		<MudTd Style="text-align: center">
			<MudChip T="string" Color=@GetStatusChipColor(context.Status)> @context.Status </MudChip>
		</MudTd>
		<MudTd Style="text-align: center">
			@switch (context.Status)
			{
				case Enums.LockerStatus.Available:
					<MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Success" OnClick="OnAddStudentClicked"/>
					break;
				case Enums.LockerStatus.Occupied:
					<MudIconButton Icon="@Icons.Material.Filled.PersonOff" Color="Color.Warning" OnClick="OnRemoveStudentClicked"/>
					break;
				case Enums.LockerStatus.Maintenance:
					<MudIconButton Disabled Icon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Warning" OnClick="OnRemoveStudentClicked" />
					break;
			}

			@if (context.Status == Enums.LockerStatus.Maintenance)
			{
				<MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="() => EnableLocker(context)"/>
			}
			else
			{
				<MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="() => DisableLocker(context)"/>
			}

		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new[] { 10, 25, 100, int.MaxValue }"
		               RowsPerPageString="Rows per page"
		               AllItemsText="All"
		               InfoFormat="{first_item}-{last_item} // {all_items}"/>
	</PagerContent>
	<LoadingContent>
		<MudOverlay Visible="true" DarkBackground="true" Absolute="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	</LoadingContent>
</MudTable>



@* =================== Message boxes =================== *@

<MudMessageBox @ref="_disableMsgBox" Title="Warning" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to mark this locker as <b>unavailable?</b>
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Unavailable</MudButton>
	</YesButton>
</MudMessageBox>

<MudMessageBox @ref="_enableMsgBox" Title="Alert" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to mark this locker as <b>available</b> again?
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.CheckCircleOutline">Available!</MudButton>
	</YesButton>
</MudMessageBox>

@code
{
	[Inject]
	public LockerService LockerService { get; set; }
	private List<Locker> _lockers = new();
	private string _searchString = string.Empty;
	private MudMessageBox _disableMsgBox = new();
	private MudMessageBox _enableMsgBox = new();
	private bool _dataLoaded = false;
	private string _vacantLockerSort = "zzz";

	protected override async Task OnInitializedAsync()
	{
		_lockers = await LockerService.GetAllLockersAsync();
		_dataLoaded = true;
	}

	private bool SearchFunc(Locker locker)
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (locker.StudentID == null || locker.Student == null)
			return false;

		return locker.Student.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.Class.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Location.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
	}

	private Color GetStatusChipColor(Enums.LockerStatus status)
	{
		@switch (status)
		{
			case Enums.LockerStatus.Occupied:
				return Color.Info;
			case Enums.LockerStatus.Available:
				return Color.Success;
			case Enums.LockerStatus.Maintenance:
				return Color.Error;
			default:
				return Color.Default;
		}
	}

	private void OnAddStudentClicked()
	{

	}

	private void OnRemoveStudentClicked()
	{

	}

	private async Task DisableLocker(Locker locker)
	{
		bool? result = await _disableMsgBox.ShowAsync();
		if (result == true)
		{
			await LockerService.SetLockerStatus(locker, Enums.LockerStatus.Maintenance);
			StateHasChanged();
		}
	}

	private async Task EnableLocker(Locker locker)
	{
		bool? result = await _enableMsgBox.ShowAsync();
		if (result == true)
		{
			await LockerService.SetLockerStatus(locker, Enums.LockerStatus.Available);
			StateHasChanged();
		}
	}
}