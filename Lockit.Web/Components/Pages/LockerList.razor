@page "/lockers"
@using Lockit.Models
@using Lockit.Web.Services

<PageTitle>Locker List</PageTitle>

<MudPaper Class="pa-2 ma-5" Elevation="3">
	<MudTable T="Locker" Items="@lockers" Hover="true" Filter="new Func<Locker, bool>(SearchFunc)" FixedHeader="true" Height="calc(80vh - var(--mud-appbar-height) - 10px)" Virtualize="true">
		<ToolBarContent>
			<MudText Typo="Typo.h6">All Lockers</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Locker #</MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student.Name)">Name</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student.LastName)">Lastname</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student.Class)">Class</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Location)">Location</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
			<MudTh><MudIcon Icon="@Icons.Material.Filled.DashboardCustomize" /></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>@context.Number</MudTd>
			<MudTd>@context.Student.Name</MudTd>
			<MudTd>@context.Student.LastName</MudTd>
			<MudTd>@context.Student.Class</MudTd>
			<MudTd>@context.Location.Name</MudTd>
			<MudTd>
				<MudChip T="string" Color=@GetStatusChipColor(context.Status)> @context.Status </MudChip>
			</MudTd>
			<MudTd>
				<MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1"/> 
				<MudIconButton Icon="@Icons.Material.Filled.PersonOff"/> 
				<MudSpacer/>
				<MudIconButton Icon="@Icons.Material.Filled.Close"/> 
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new[] { 10, 25, 100, int.MaxValue }"
			               RowsPerPageString="Rows per page"
			               AllItemsText="All"
			               InfoFormat="{first_item}-{last_item} // {all_items}"/>
		</PagerContent>
	</MudTable>

</MudPaper>

@code
{
	[Inject]
	public LocationService LocationService { get; set; }
	[Inject]
	public LockerService LockerService { get; set; }

	private List<Locker> lockers = new();

	private string searchString = string.Empty;

	private Color chipColor;

	protected override async Task OnInitializedAsync()
	{
		lockers = await LockerService.GetAllLockersAsync();
	}

	private bool SearchFunc(Locker locker)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		return locker.Student.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.Class.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Location.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
			   
	}

	private Color GetStatusChipColor(Enums.LockerStatus status)
	{
		@switch (status)
		{
			case Enums.LockerStatus.Occupied:
				return Color.Info;
			case Enums.LockerStatus.Available:
				return Color.Success;
			case Enums.LockerStatus.Maintenance:
				return Color.Error;
			default:
				return Color.Default;
		}
	}

}
