@page "/lockers"
@using Lockit.Models
@using Lockit.Web.Services

<PageTitle>Locker List</PageTitle>

<MudTable Style="position: relative" Items="@lockers" Hover="true" Filter="new Func<Locker, bool>(SearchFunc)" FixedHeader="true" Height="calc(80vh - var(--mud-appbar-height) - 10px)" Virtualize="true" Loading="!_dataLoaded">
	<ToolBarContent>
		<MudText Typo="Typo.h6">All Lockers</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Number)">Locker #</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x =>x.Student != null? x.Student.Name : false)">Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student?.LastName)">Lastname</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Student?.Class)">Class</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Location)">Location</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Locker, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
		<MudTh><MudIcon Icon="@Icons.Material.Filled.DashboardCustomize" /></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.Number</MudTd>
		<MudTd>@context.Student?.Name</MudTd>
		<MudTd>@context.Student?.LastName</MudTd>
		<MudTd>@context.Student?.Class</MudTd>
		<MudTd>@context.Location.Name</MudTd>
		<MudTd>
			<MudChip T="string" Color=@GetStatusChipColor(context.Status)> @context.Status </MudChip>
		</MudTd>
		<MudTd>
			@if (context.Status == Enums.LockerStatus.Occupied)
			{
				<MudIconButton Icon="@Icons.Material.Filled.PersonOff" Color="Color.Warning" OnClick="OnRemoveStudentClicked" />
			}
			else
			{
				<MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Success" OnClick="OnAddStudentClicked" />
			}

			<MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="() => OnDisableLockerClicked(context)" />
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new[] { 10, 25, 100, int.MaxValue }"
		               RowsPerPageString="Rows per page"
		               AllItemsText="All"
		               InfoFormat="{first_item}-{last_item} // {all_items}"/>
	</PagerContent>
	<LoadingContent>
		<MudOverlay Visible="true" DarkBackground="true" Absolute="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	</LoadingContent>
</MudTable>



@* =================== Message boxes =================== *@

<MudMessageBox @ref="_msgBox" Title="Warning" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to mark this locker as <b>unavailable?</b>
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Mark as unavailable!</MudButton>
	</YesButton>
</MudMessageBox>

@code
{
	[Inject]
	public LocationService LocationService { get; set; }
	[Inject]
	public LockerService LockerService { get; set; }
	private List<Locker> lockers = new();
	private string searchString = string.Empty;
	private MudMessageBox _msgBox;
	private string _msgBoxResult = string.Empty;
	private bool _dataLoaded = false;

	protected override async Task OnInitializedAsync()
	{
		lockers = await LockerService.GetAllLockersAsync();
		_dataLoaded = true;
	}

	private bool SearchFunc(Locker locker)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		return locker.Student.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Student.Class.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			   locker.Location.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
	}

	private Color GetStatusChipColor(Enums.LockerStatus status)
	{
		@switch (status)
		{
			case Enums.LockerStatus.Occupied:
				return Color.Info;
			case Enums.LockerStatus.Available:
				return Color.Success;
			case Enums.LockerStatus.Maintenance:
				return Color.Error;
			default:
				return Color.Default;
		}
	}

	private void OnAddStudentClicked()
	{

	}

	private void OnRemoveStudentClicked()
	{

	}

	private async Task OnDisableLockerClicked(Locker locker)
	{
		bool? result = await _msgBox.ShowAsync();
		_msgBoxResult = result is null ? "Canceled" : "Marked unavailable!";
		await LockerService.SetLockerStatus(locker, Enums.LockerStatus.Maintenance);
		StateHasChanged();
	}
}