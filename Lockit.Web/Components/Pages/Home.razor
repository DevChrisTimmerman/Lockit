@page "/"
@using Lockit.Models
@using Lockit.Web.Services
@using System.Linq


<PageTitle>Home</PageTitle>

<MudCard >
	<MudCardMedia Image="images/lockitbanner.png" Height="200"/>
	<MudCardContent>
		<MudText Typo="Typo.h4" Align="Align.Left">Dashboard</MudText>
		<MudText Typo="Typo.subtitle1" Align="Align.Center">Work in progress, open for feedback!.</MudText>
	</MudCardContent>
</MudCard>

<MudGrid Class="pa-5" Spacing="10" Justify="Justify.Center">
	<MudItem>
		<MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="_index" InputData="@_data" InputLabels="@_labels">
			<CustomGraphics>
				<text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="50"> @(_data[1] / @_data.Sum() * 100)%</text>
			</CustomGraphics>
		</MudChart>
	</MudItem>
	<MudItem>
		<MudChart ChartType="ChartType.StackedBar" ChartSeries="@_series" @bind-SelectedIndex="_index" Width="500px" Height="300" XAxisLabels="_locations"></MudChart>
	</MudItem>
</MudGrid>


@code {

	[Inject]
	public LockerService LockerService { get; set; }
	[Inject]
	public LocationService LocationService { get; set; }

	private int _index = -1;
	private double[] _data = [-1, -1, -1];
	private string[] _labels = ["Available", "Occupied", "Maintenance"];
	private string[] _locations = [];

	private List<ChartSeries> _series = new List<ChartSeries>() { new(), new(), new(), };

	protected override async Task OnInitializedAsync()
	{
		var lockers = await LockerService.GetAllLockersAsync();
		_data[0] = lockers.Count(u => u.Status == Enums.LockerStatus.Available);
		_data[1] = lockers.Count(u => u.Status == Enums.LockerStatus.Occupied);
		_data[2] = lockers.Count(u => u.Status == Enums.LockerStatus.Maintenance);

		_locations = (await LocationService.GetAllLocationsAsync()).Select(u => u.Name).ToArray();

		for (var i = 0; i < _series.Count; i++)
		{
			var series = _series[i];
			series.Name = ((Enums.LockerStatus)i).ToString();
			series.Data = new double[_locations.Length];
		}

		for (int i = 0; i < _locations.Length; i++)
		{
			var locationName = _locations[i];
			_series[0].Data[i] = lockers.Count(u => u.Location.Name == locationName && u.Status == Enums.LockerStatus.Available);
			_series[1].Data[i] = lockers.Count(u => u.Location.Name == locationName && u.Status == Enums.LockerStatus.Occupied);
			_series[2].Data[i] = lockers.Count(u => u.Location.Name == locationName && u.Status == Enums.LockerStatus.Maintenance);
		}
	}

}